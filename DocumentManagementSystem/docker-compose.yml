version: '3.8'

services:
  rest-server:
    container_name: rest-server
    image: document-management-system
    build:
      context: .
      dockerfile: REST/Dockerfile  # Specify the Dockerfile location inside the REST folder
    ports:
      - "8081:8081"  # Expose port 8081 both on the container and the host
    environment:
      - ASPNETCORE_ENVIRONMENT=Production  # Set the environment to production
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=dms;Username=dms;Password=dms  # Connection string to PostgreSQL
      - RabbitMQ__HostName=rabbitmq  # Connection string to RabbitMQ
    depends_on:
      - postgres
      - rabbitmq
      # postgres:
      #   condition: service_healthy  # Ensure the rest-server starts after PostgreSQL is ready (using health check)
      # rabbitmq:
      #   condition: service_started  # Ensure rest-server starts after RabbitMQ is ready
    networks:
      - dms-network

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: dms
      POSTGRES_PASSWORD: dms
      POSTGRES_DB: dms
    ports:
      - "5430:5432"  # Expose PostgreSQL port
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persist data
    networks:
      - dms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dms_user -d dms_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management  # Use the RabbitMQ management image
    ports:
      - "5672:5672"  # Expose the RabbitMQ port
      - "9093:15672"  # Expose RabbitMQ Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - dms-network

  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
    build:
      context: ./WebServer
      dockerfile: Dockerfile
    depends_on:
      - rest-server
    networks:
      - dms-network

networks:
  dms-network:

volumes:
  postgres_data: